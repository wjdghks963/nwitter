{"version":3,"sources":["myBase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSumbit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","onSubmit","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","ser","width","height","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","src","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","newArray","docs","map","document","data","Navigation","to","displayName","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"8NAcAA,IAASC,cATc,CACrBC,OAAQC,0CACRC,WAAYD,gCACZE,UAAWF,gBACXG,cAAeH,4BACfI,kBAAmBJ,eACnBK,MAAOL,8CAKF,IAAMM,EAAmBT,IACnBU,EAAcV,IAASW,OACvBC,EAAYZ,IAASa,YACrBC,EAAiBd,IAASe,UCqDxBC,EArEE,WAAO,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAEWF,mBAAS,IAFpB,mBAEdG,EAFc,KAEJC,EAFI,OAGeJ,oBAAS,GAHxB,mBAGdK,EAHc,KAGFC,EAHE,OAIKN,mBAAS,IAJd,mBAIdO,EAJc,KAIPC,EAJO,KAMfC,EAAW,SAACC,GAAU,MAItBA,EADFC,OAAUC,EAHc,EAGdA,KAAMC,EAHQ,EAGRA,MAGL,UAATD,EACFV,EAASW,GACS,aAATD,GACTR,EAAYS,IAIVC,EAAQ,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,yDACfL,EAAMM,iBADS,UAITX,EAJS,gCAMEZ,EAAYwB,+BACvBhB,EACAE,GARS,sDAYEV,EAAYyB,2BAA2BjB,EAAOE,GAZhD,yEAebK,EAAS,KAAMW,SAfF,0DAAH,sDAqBd,OACE,qCACE,uBAAMC,SAAUN,EAAhB,UACE,uBACEF,KAAK,QACLS,KAAK,OACLC,YAAY,QACZC,UAAQ,EACRV,MAAOZ,EACPQ,SAAUA,IAEZ,uBACEG,KAAK,WACLS,KAAK,WACLC,YAAY,WACZC,UAAQ,EACRV,MAAOV,EACPM,SAAUA,IAEZ,uBAAOY,KAAK,SAASR,MAAOR,EAAa,iBAAmB,WAC3DE,KAEH,sBAAMiB,QAxBY,kBAAMlB,GAAc,SAACmB,GAAD,OAAWA,MAwBjD,SACGpB,EAAa,UAAY,uBCjCnBqB,EA7BF,WACX,IAAMC,EAAa,uCAAG,WAAOjB,GAAP,iBAAAK,EAAA,4DAKP,YAHDH,EACRF,EADFC,OAAUC,MAIVgB,EAAW,IAAIpC,EAAiBE,KAAKmC,mBACnB,WAATjB,IACTgB,EAAW,IAAIpC,EAAiBE,KAAKoC,oBARnB,SAUdrC,EAAYsC,gBAAgBH,GAVd,2CAAH,sDAanB,OACE,gCACE,cAAC,EAAD,IACA,gCACE,wBAAQJ,QAASG,EAAef,KAAK,SAArC,kCAGA,wBAAQY,QAASG,EAAef,KAAK,SAArC,yC,QCyCOoB,EA/DD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAAc,EACTlC,oBAAS,GADA,mBAChCmC,EADgC,KACvBC,EADuB,OAEPpC,mBAASiC,EAASI,MAFX,mBAEhCC,EAFgC,KAEtBC,EAFsB,KAIjCC,EAAa,uCAAG,sBAAAzB,EAAA,0DAET0B,OAAOC,QAAQ,wEAFN,gCAKZ/C,EAAUgD,IAAV,iBAAwBV,EAASW,KAAMC,SAL3B,UAMa,KAA3BZ,EAASa,cANK,gCAOVjD,EAAekD,WAAWd,EAASa,eAAeD,SAPxC,2CAAH,qDAWbG,EAAgB,kBAAMZ,GAAW,SAACX,GAAD,OAAWA,MAE5CL,EAAQ,uCAAG,WAAOV,GAAP,SAAAK,EAAA,6DACfL,EAAMM,iBADS,SAETrB,EAAUgD,IAAV,iBAAwBV,EAASW,KAAMK,OAAO,CAAEZ,KAAMC,IAF7C,2CAAH,sDAYd,OACE,8BACGH,EACC,qCACE,uBAAMf,SAAUA,EAAhB,UACE,uBACEC,KAAK,OACLC,YAAY,kBACZT,MAAOyB,EACPf,UAAQ,EACRd,SAjBK,SAACC,GAAW,IAEfG,EACRH,EADFC,OAAUE,MAEZ0B,EAAY1B,MAeJ,uBAAOQ,KAAK,SAASR,MAAM,oBAE7B,wBAAQW,QAASwB,EAAjB,uBAGF,qCACE,6BAAKf,EAASI,OACbJ,EAASa,eACR,qBAAKI,IAAKjB,EAASa,cAAeK,MAAM,OAAOC,OAAO,SAEvDlB,GACC,qCACE,wBAAQV,QAASgB,EAAjB,0BACA,wBAAQhB,QAASwB,EAAjB,iC,QCoCCK,EAxFM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACVtD,mBAAS,IADC,mBAC7BuD,EAD6B,KACtBC,EADsB,OAEAxD,mBAAS,IAFT,mBAE7ByD,EAF6B,KAEjBC,EAFiB,KAc9BtC,EAAQ,uCAAG,WAAOV,GAAP,mBAAAK,EAAA,yDACfL,EAAMM,iBAEF8B,EAAgB,GAED,KAAfW,EALW,wBAMPE,EAAgB9D,EACnB+D,MACAC,MAFmB,UAEVP,EAAQQ,IAFE,YAEKC,gBARd,SASUJ,EAAcK,UAAUP,EAAY,YAT9C,cASPQ,EATO,gBAUSA,EAASL,IAAIM,iBAVtB,OAUbpB,EAVa,gCAYTnD,EACHwE,WAAW,UACXC,IAAI,CACH/B,KAAMkB,EACNc,UAAWC,KAAKC,MAChBC,UAAWlB,EAAQQ,IACnBhB,kBAlBW,QAqBfU,EAAS,IACTE,EAAc,IAtBC,4CAAH,sDAoDd,OACE,uBAAMtC,SAAUA,EAAhB,UACE,uBACEP,MAAO0C,EACP9C,SA/BW,SAACC,GAChBA,EAAMM,iBADoB,IAGdH,EACRH,EADFC,OAAUE,MAEZ2C,EAAS3C,IA2BLQ,KAAK,OACLC,YAAY,uBACZmD,UAAW,MAEb,uBAAOpD,KAAK,OAAOqD,OAAO,UAAUjE,SA5BnB,SAACC,GAAU,IAKxBiE,EADFjE,EADFC,OAAUiE,MAEU,GAChBC,EAAS,IAAIC,WAEnBD,EAAOE,UAAY,SAACC,GAAmB,IAElBC,EACfD,EADFE,cAAiBD,OAEnBvB,EAAcuB,IAEhBJ,EAAOM,cAAcR,MAenB,uBAAOtD,KAAK,SAASR,MAAM,UAE1B4C,GACC,gCACE,qBAAK2B,IAAK3B,EAAYN,MAAM,OAAOC,OAAO,SAC1C,wBAAQ5B,QAjBU,kBAAMkC,EAAc,KAiBtC,0BC/CK2B,EAjCF,SAAC,GAAiB,IAAf/B,EAAc,EAAdA,QAAc,EACAtD,mBAAS,IADT,mBACrBsF,EADqB,KACbC,EADa,KAgB5B,OAZAC,qBAAU,WACR7F,EAAUwE,WAAW,UAAUsB,YAAW,SAACC,GAEzC,IAAMC,EAAWD,EAASE,KAAKC,KAAI,SAACC,GAAD,oBAEjClD,GAAIkD,EAASlD,IACVkD,EAASC,WAEdR,EAAUI,QAEX,IAGD,gCACE,cAAC,EAAD,CAAcrC,QAASA,IACvB,8BAEGgC,EAAOO,KAAI,SAACtC,GAAD,OACV,cAAC,EAAD,CAEEtB,SAAUsB,EACVrB,QAASqB,EAAMiB,YAAclB,EAAQQ,KAFhCP,EAAMX,aCbRoD,EAbI,SAAC,GAAD,IAAG1C,EAAH,EAAGA,QAAH,OACjB,8BACE,+BACE,6BACE,cAAC,IAAD,CAAM2C,GAAG,IAAT,oBAEF,6BACE,eAAC,IAAD,CAAMA,GAAG,WAAT,UAAqB3C,EAAQ4C,YAA7B,4BCsDOC,EA3DC,SAAC,GAA8B,IAA5B7C,EAA2B,EAA3BA,QAAS8C,EAAkB,EAAlBA,YAEpBC,EAAUC,cAF4B,EA0BAtG,mBAASsD,EAAQ4C,aA1BjB,mBA0BrCK,EA1BqC,KA0BrBC,EA1BqB,KAmCtCpF,EAAQ,uCAAG,WAAOV,GAAP,SAAAK,EAAA,yDACfL,EAAMM,iBACFsC,EAAQ4C,cAAgBK,EAFb,gCAGPjD,EAAQmD,cAAc,CAAEP,YAAaK,IAH9B,OAKfH,IALe,2CAAH,sDAQd,OACE,qCACE,uBAAMhF,SAAUA,EAAhB,UACE,uBACEX,SAnBS,SAACC,GAAW,IAEfG,EACRH,EADFC,OAAUE,MAEZ2F,EAAkB3F,IAgBZQ,KAAK,OACLC,YAAY,eACZT,MAAO0F,IAET,uBAAOlF,KAAK,SAASR,MAAM,sBAE7B,wBAAQW,QAlDU,WACpB/B,EAAYiH,UACZL,EAAQM,KAAK,MAgDX,yBCzBSC,EA3BG,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,WAAYvD,EAA2B,EAA3BA,QAAS8C,EAAkB,EAAlBA,YACxC,OACE,eAAC,IAAD,WAEGS,GAAc,cAAC,EAAD,CAAYvD,QAASA,IACpC,cAAC,IAAD,UACGuD,EACC,qCACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CAAMzD,QAASA,MAEjB,cAAC,IAAD,CAAOwD,OAAK,EAACC,KAAK,WAAlB,SACE,cAAC,EAAD,CAASzD,QAASA,EAAS8C,YAAaA,SAI5C,mCACE,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,cCuBCC,MA5Cf,WAAgB,IAAD,EACWhH,oBAAS,GADpB,mBACNiH,EADM,KACAC,EADA,OAEiBlH,mBAAS,MAF1B,mBAENsD,EAFM,KAEG6D,EAFH,KA6Bb,OAzBA3B,qBAAU,WACR/F,EAAY2H,oBAAmB,SAACC,GAE5BF,IADEE,GACS,CACTvD,IAAKuD,EAAKvD,IACVoC,YAAamB,EAAKnB,YAClBO,cAAe,SAACa,GAAD,OAAUD,EAAKZ,cAAca,MAMhDJ,GAAQ,QAET,IAYD,mCACGD,EACC,cAAC,EAAD,CACEJ,WAAYU,QAAQjE,GACpBA,QAASA,EACT8C,YAfY,WAClB,IAAMiB,EAAO5H,EAAY+H,YACzBL,EAAW,CACTrD,IAAKuD,EAAKvD,IACVoC,YAAamB,EAAKnB,YAClBO,cAAe,SAACa,GAAD,OAAUD,EAAKZ,cAAca,SAa1C,kBCpCRG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAAS8B,eAAe,W","file":"static/js/main.f7ff05be.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import { authService, firebaseInstance } from \"myBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = (event) => {\r\n    // event 내 tartget 에서 name, value값을 가져 옴\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  const onSumbit = async (event) => {\r\n    event.preventDefault(); // 웹 초기화 방지\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        // newAccount = true 일때 firebase의 authService를 통해 이메일과 패스워드로 유저를 새롭게 만든다\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        // flase 일때 로그인을 하게 만든다.\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSumbit}>\r\n        <input\r\n          name=\"email\"\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n        />\r\n        <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n        {error}\r\n      </form>\r\n      <span onClick={toggleAccount}>\r\n        {newAccount ? \"Sign In\" : \"Create Account\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance } from \"myBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AuthForm />\r\n      <div>\r\n        <button onClick={onSocialClick} name=\"google\">\r\n          Continue with Google\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\">\r\n          Continue with Github\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import { dbService, storageService } from \"myBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n\r\n  const onDeleteClick = async () => {\r\n    // window.confimr은 확인 = true 취소 = false를 반환\r\n    const ok = window.confirm(\"이 nweet을 삭제하시겠습니까?\");\r\n    if (ok) {\r\n      // nweets collection안에 있는 obj중 id가 맞는것을 찾아 delete함\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n      if (nweetObj.attachmentUrl !== \"\")\r\n        await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({ text: newNweet });\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewNweet(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your nweet\"\r\n              value={newNweet}\r\n              required\r\n              onChange={onChange}\r\n            />\r\n            <input type=\"submit\" value=\"Update Nweet\" />\r\n          </form>\r\n          <button onClick={toggleEditing}>Cancel</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{nweetObj.text}</h4>\r\n          {nweetObj.attachmentUrl && (\r\n            <img ser={nweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\r\n          )}\r\n          {isOwner && (\r\n            <>\r\n              <button onClick={onDeleteClick}>Delete Nweet</button>\r\n              <button onClick={toggleEditing}>Edit Nweet</button>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nweet;\r\n","import Nweet from \"components/Nweet\";\r\nimport { dbService, storageService } from \"myBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n  const [nweet, setNweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n\r\n  /* const getNweets = async () => {\r\n      const dbNweets = await dbService.collection(\"nweets\").get();\r\n      \r\n      dbNweets.forEach((document) => {\r\n        const nweetObject = { ...document.data(), id: document.id };\r\n      !! 예전 데이터와 document.data를 배열에다 넣어줌 이전 상태를 매개변수로 제공하는 setState 기능을 이용한다.\r\n        setNweets((prev) => [nweetObject, ...prev]);\r\n      });\r\n    };*/\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    let attachmentUrl = \"\";\r\n\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\"); // putString은 url을 인자로 전달하기만 하면 해당 파일이 스토리지에 바로 저장된다.\r\n      attachmentUrl = await response.ref.getDownloadURL(); // 파일을 다운로드할 수 있는 스토리지의 URL반환\r\n    }\r\n    await dbService\r\n      .collection(\"nweets\") // db에 nweets라는 collection 생성\r\n      .add({\r\n        text: nweet,\r\n        createdAt: Date.now(),\r\n        creatorId: userObj.uid,\r\n        attachmentUrl,\r\n      }); // 해당 문서 생성 (text,createdAt....)\r\n\r\n    setNweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    event.preventDefault();\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNweet(value);\r\n  };\r\n\r\n  const onFileChange = (event) => {\r\n    // file을 input에 올릴때는 event.target.files에서 찾는다.\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader(); // 브라우저 API, new와 함께 사용한다.\r\n    // onloadend는 readAsDataURL함수에 전달할 인자가 결과값으로 나온 다음 상황을 감지하고 생성된 이벤트값을 사용할 수 있게 해준다.\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile); // readAsDataUrl은 파일 정보를 인자로 받아 파일 위치를 URL로 반환해 준다.\r\n  };\r\n\r\n  const onClearAttachment = () => setAttachment(\"\");\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        value={nweet}\r\n        onChange={onChange}\r\n        type=\"text\"\r\n        placeholder=\"What's on your mind?\"\r\n        maxLength={120}\r\n      />\r\n      <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n      <input type=\"submit\" value=\"Nweet\" />\r\n      {/* attachment가 준비 됐을때 오른쪽 html 보이고 onClear누르면 사진 초기화 */}\r\n      {attachment && (\r\n        <div>\r\n          <img src={attachment} width=\"50px\" height=\"50px\" />\r\n          <button onClick={onClearAttachment}>Clear</button>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NweetFactory;\r\n","import Nweet from \"components/Nweet\";\r\nimport { dbService, storageService } from \"myBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweets, setNweets] = useState([]);\r\n\r\n  // async await을 쓰는 함수가 useEffect에 포함되면 안되기 때문에 밖에서 정의하고 넣어준다\r\n  useEffect(() => {\r\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n      // snapshot.docs에 대해 모든 document에 대하여 배열로 반환함\r\n      const newArray = snapshot.docs.map((document) => ({\r\n        // id와 예전 document.data()==document의 data는 즉, createAt, creatorId, text ... 까지 다 Object형태로\r\n        id: document.id,\r\n        ...document.data(),\r\n      }));\r\n      setNweets(newArray);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <NweetFactory userObj={userObj} />\r\n      <div>\r\n        {/* map을 이용해서 nweet의 id(문서의 id)를 받아 value인 text를 나오게함, isOwner는  nweet를 생성한 유저와 로그인한 유저가 같은 사람이다 */}\r\n        {nweets.map((nweet) => (\r\n          <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwner={nweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navigation = ({ userObj }) => (\r\n  <nav>\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/\">Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/Profile\">{userObj.displayName}의 profile</Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","import { authService, dbService } from \"myBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Nweet from \"components/Nweet\";\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n  // 브라우저의 history를 사용함\r\n  const history = useHistory();\r\n  // history에 pushState를 이용해 로그아웃 후 홈으로 보낸다\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n  /*\r\n  const [ownNweet, setOwnNweet] = useState([]);\r\n\r\n  const getMyNweets = async () => {\r\n    const nweets = await dbService\r\n      .collection(\"nweets\")\r\n      .where(\"creatorId\", \"==\", userObj.uid) // createrId 필드에서 userObj.uid와 같은 값을 찾기 위함\r\n      .orderBy(\"createdAt\", \"asc\") // createdAt에 따라 오름차순\r\n      .get();\r\n    // 필터링 된 nweets를 ownNweet에 담아준다.\r\n    setOwnNweet(nweets.docs.map((doc) => ({ id: doc.id, ...doc.data() })));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMyNweets();\r\n  }, []);\r\n*/\r\n\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({ displayName: newDisplayName });\r\n    }\r\n    refreshUser();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"Dispaly Name\"\r\n          value={newDisplayName}\r\n        />\r\n        <input type=\"submit\" value=\"Update Profile\" />\r\n      </form>\r\n      <button onClick={onLogOutClick}>Log Out</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Navigation from \"./Navigation\";\r\nimport Profile from \"routes/Profile\";\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\r\n  return (\r\n    <Router>\r\n      {/* &&연산자 왼쪽이 true이면 오른쪽 값 반환 isLoggedIn true false 에 따라 Navigation 렌더링 */}\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Auth />\r\n            </Route>\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"myBase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObj({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(false);\n      }\n      // loading과 같은 역할 firebase가 initailize할 때까지 기다림\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  // userObj를 Boolean으로 로그인 했나 안했나 확인함\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        \"Initailizing\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}