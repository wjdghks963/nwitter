[{"C:\\Users\\User\\Desktop\\nwitter\\src\\index.js":"1","C:\\Users\\User\\Desktop\\nwitter\\src\\components\\App.js":"2","C:\\Users\\User\\Desktop\\nwitter\\src\\myBase.js":"3","C:\\Users\\User\\Desktop\\nwitter\\src\\components\\Router.js":"4","C:\\Users\\User\\Desktop\\nwitter\\src\\components\\Navigation.js":"5","C:\\Users\\User\\Desktop\\nwitter\\src\\routes\\Auth.js":"6","C:\\Users\\User\\Desktop\\nwitter\\src\\routes\\Home.js":"7","C:\\Users\\User\\Desktop\\nwitter\\src\\routes\\Profile.js":"8","C:\\Users\\User\\Desktop\\nwitter\\src\\components\\Nweet.js":"9"},{"size":211,"mtime":1609660292240,"results":"10","hashOfConfig":"11"},{"size":1182,"mtime":1630405690274,"results":"12","hashOfConfig":"11"},{"size":678,"mtime":1630329802086,"results":"13","hashOfConfig":"11"},{"size":1037,"mtime":1630405343410,"results":"14","hashOfConfig":"11"},{"size":338,"mtime":1630404519229,"results":"15","hashOfConfig":"11"},{"size":2615,"mtime":1629894400217,"results":"16","hashOfConfig":"11"},{"size":4361,"mtime":1630330795441,"results":"17","hashOfConfig":"11"},{"size":1858,"mtime":1630405402231,"results":"18","hashOfConfig":"11"},{"size":1972,"mtime":1630330946905,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"4dpuyg",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\Users\\User\\Desktop\\nwitter\\src\\index.js",[],["43","44"],"C:\\Users\\User\\Desktop\\nwitter\\src\\components\\App.js",["45"],"C:\\Users\\User\\Desktop\\nwitter\\src\\myBase.js",[],"C:\\Users\\User\\Desktop\\nwitter\\src\\components\\Router.js",[],"C:\\Users\\User\\Desktop\\nwitter\\src\\components\\Navigation.js",[],"C:\\Users\\User\\Desktop\\nwitter\\src\\routes\\Auth.js",["46"],"import { authService, firebaseInstance } from \"myBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Auth = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = (event) => {\r\n    // event 내 tartget 에서 name, value값을 가져 옴\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  const onSumbit = async (event) => {\r\n    event.preventDefault(); // 웹 초기화 방지\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        // newAccount = true 일때 firebase의 authService를 통해 이메일과 패스워드로 유저를 새롭게 만든다\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        // flase 일때 로그인을 하게 만든다.\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSumbit}>\r\n        <input\r\n          name=\"email\"\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n        />\r\n        <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n        {error}\r\n      </form>\r\n      <span onClick={toggleAccount}>\r\n        {newAccount ? \"Sign In\" : \"Create Account\"}\r\n      </span>\r\n      <div>\r\n        <button onClick={onSocialClick} name=\"google\">\r\n          Continue with Google\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\">\r\n          Continue with Github\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","C:\\Users\\User\\Desktop\\nwitter\\src\\routes\\Home.js",["47"],"import Nweet from \"components/Nweet\";\r\nimport { dbService, storageService } from \"myBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweet, setNweet] = useState(\"\");\r\n  const [nweets, setNweets] = useState([]);\r\n  const [attachment, setAttachment] = useState(\"\");\r\n\r\n  /* const getNweets = async () => {\r\n    const dbNweets = await dbService.collection(\"nweets\").get();\r\n    \r\n    dbNweets.forEach((document) => {\r\n      const nweetObject = { ...document.data(), id: document.id };\r\n    !! 예전 데이터와 document.data를 배열에다 넣어줌 이전 상태를 매개변수로 제공하는 setState 기능을 이용한다.\r\n      setNweets((prev) => [nweetObject, ...prev]);\r\n    });\r\n  };*/\r\n\r\n  // async await을 쓰는 함수가 useEffect에 포함되면 안되기 때문에 밖에서 정의하고 넣어준다\r\n  useEffect(() => {\r\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n      // snapshot.docs에 대해 모든 document에 대하여 배열로 반환함\r\n      const newArray = snapshot.docs.map((document) => ({\r\n        // id와 예전 document.data()==document의 data는 즉, createAt, creatorId, text ... 까지 다 Object형태로\r\n        id: document.id,\r\n        ...document.data(),\r\n      }));\r\n      setNweets(newArray);\r\n    });\r\n  }, []);\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    let attachmentUrl = \"\";\r\n\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\"); // putString은 url을 인자로 전달하기만 하면 해당 파일이 스토리지에 바로 저장된다.\r\n      attachmentUrl = await response.ref.getDownloadURL(); // 파일을 다운로드할 수 있는 스토리지의 URL반환\r\n    }\r\n    await dbService\r\n      .collection(\"nweets\") // db에 nweets라는 collection 생성\r\n      .add({\r\n        text: nweet,\r\n        createdAt: Date.now(),\r\n        creatorId: userObj.uid,\r\n        attachmentUrl,\r\n      }); // 해당 문서 생성 (text,createdAt....)\r\n\r\n    setNweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    event.preventDefault();\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNweet(value);\r\n  };\r\n\r\n  const onFileChange = (event) => {\r\n    // file을 input에 올릴때는 event.target.files에서 찾는다.\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader(); // 브라우저 API, new와 함께 사용한다.\r\n    // onloadend는 readAsDataURL함수에 전달할 인자가 결과값으로 나온 다음 상황을 감지하고 생성된 이벤트값을 사용할 수 있게 해준다.\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile); // readAsDataUrl은 파일 정보를 인자로 받아 파일 위치를 URL로 반환해 준다.\r\n  };\r\n\r\n  const onClearAttachment = () => setAttachment(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          value={nweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n        <input type=\"submit\" value=\"Nweet\" />\r\n        {/* attachment가 준비 됐을때 오른쪽 html 보이고 onClear누르면 사진 초기화 */}\r\n        {attachment && (\r\n          <div>\r\n            <img src={attachment} width=\"50px\" height=\"50px\" />\r\n            <button onClick={onClearAttachment}>Clear</button>\r\n          </div>\r\n        )}\r\n      </form>\r\n      <div>\r\n        {/* map을 이용해서 nweet의 id(문서의 id)를 받아 value인 text를 나오게함, isOwner는  nweet를 생성한 유저와 로그인한 유저가 같은 사람이다 */}\r\n        {nweets.map((nweet) => (\r\n          <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwner={nweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\User\\Desktop\\nwitter\\src\\routes\\Profile.js",["48","49","50"],"import { authService, dbService } from \"myBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Nweet from \"components/Nweet\";\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n  // 브라우저의 history를 사용함\r\n  const history = useHistory();\r\n  // history에 pushState를 이용해 로그아웃 후 홈으로 보낸다\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n  /*\r\n  const [ownNweet, setOwnNweet] = useState([]);\r\n\r\n  const getMyNweets = async () => {\r\n    const nweets = await dbService\r\n      .collection(\"nweets\")\r\n      .where(\"creatorId\", \"==\", userObj.uid) // createrId 필드에서 userObj.uid와 같은 값을 찾기 위함\r\n      .orderBy(\"createdAt\", \"asc\") // createdAt에 따라 오름차순\r\n      .get();\r\n    // 필터링 된 nweets를 ownNweet에 담아준다.\r\n    setOwnNweet(nweets.docs.map((doc) => ({ id: doc.id, ...doc.data() })));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMyNweets();\r\n  }, []);\r\n*/\r\n\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({ displayName: newDisplayName });\r\n    }\r\n    refreshUser();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"Dispaly Name\"\r\n          value={newDisplayName}\r\n        />\r\n        <input type=\"submit\" value=\"Update Profile\" />\r\n      </form>\r\n      <button onClick={onLogOutClick}>Log Out</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\User\\Desktop\\nwitter\\src\\components\\Nweet.js",["51"],"import { dbService, storageService } from \"myBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n\r\n  const onDeleteClick = async () => {\r\n    // window.confimr은 확인 = true 취소 = false를 반환\r\n    const ok = window.confirm(\"이 nweet을 삭제하시겠습니까?\");\r\n    if (ok) {\r\n      // nweets collection안에 있는 obj중 id가 맞는것을 찾아 delete함\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n      if (nweetObj.attachmentUrl !== \"\")\r\n        await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({ text: newNweet });\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewNweet(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your nweet\"\r\n              value={newNweet}\r\n              required\r\n              onChange={onChange}\r\n            />\r\n            <input type=\"submit\" value=\"Update Nweet\" />\r\n          </form>\r\n          <button onClick={toggleEditing}>Cancel</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{nweetObj.text}</h4>\r\n          {nweetObj.attachmentUrl && (\r\n            <img ser={nweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\r\n          )}\r\n          {isOwner && (\r\n            <>\r\n              <button onClick={onDeleteClick}>Delete Nweet</button>\r\n              <button onClick={toggleEditing}>Edit Nweet</button>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nweet;\r\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":6,"column":10,"nodeType":"58","messageId":"59","endLine":6,"endColumn":20},{"ruleId":"56","severity":1,"message":"60","line":35,"column":9,"nodeType":"58","messageId":"59","endLine":35,"endColumn":13},{"ruleId":"61","severity":1,"message":"62","line":101,"column":13,"nodeType":"63","endLine":101,"endColumn":64},{"ruleId":"56","severity":1,"message":"64","line":1,"column":23,"nodeType":"58","messageId":"59","endLine":1,"endColumn":32},{"ruleId":"56","severity":1,"message":"65","line":2,"column":17,"nodeType":"58","messageId":"59","endLine":2,"endColumn":26},{"ruleId":"56","severity":1,"message":"66","line":4,"column":8,"nodeType":"58","messageId":"59","endLine":4,"endColumn":13},{"ruleId":"61","severity":1,"message":"62","line":53,"column":13,"nodeType":"63","endLine":53,"endColumn":76},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'isLoggedIn' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'dbService' is defined but never used.","'useEffect' is defined but never used.","'Nweet' is defined but never used.","no-global-assign","no-unsafe-negation"]